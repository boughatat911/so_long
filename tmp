// void	free_resources(t_game *game)
// {
// 	// mlx_destroy_image(game->mlx, game->textures.wall);
// 	// mlx_destroy_image(game->mlx, game->textures.floor);
// 	// mlx_destroy_image(game->mlx, game->textures.player);
// 	// mlx_destroy_image(game->mlx, game->textures.collectible);
// 	// mlx_destroy_image(game->mlx, game->textures.exit);
// }

#include "mlx.h"
#include <stdlib.h>

#define KEY_W 13
#define KEY_A 0
#define KEY_S 1
#define KEY_D 2
#define KEY_ESC 53

typedef struct s_data {
    void *mlx;
    void *win;
    int move_up;
    int move_down;
    int move_left;
    int move_right;
} t_data;

void move_up(t_data *data) { /* Implement movement logic */ }
void move_down(t_data *data) { /* Implement movement logic */ }
void move_left(t_data *data) { /* Implement movement logic */ }
void move_right(t_data *data) { /* Implement movement logic */ }

int key_press(int keycode, t_data *data) {
    if (keycode == KEY_ESC) {
        mlx_destroy_window(data->mlx, data->win);
        exit(0);
    }
    if (keycode == KEY_W) data->move_up = 1;
    else if (keycode == KEY_S) data->move_down = 1;
    else if (keycode == KEY_A) data->move_left = 1;
    else if (keycode == KEY_D) data->move_right = 1;
    return (0);
}

int key_release(int keycode, t_data *data) {
    if (keycode == KEY_W) data->move_up = 0;
    else if (keycode == KEY_S) data->move_down = 0;
    else if (keycode == KEY_A) data->move_left = 0;
    else if (keycode == KEY_D) data->move_right = 0;
    return (0);
}

int update_position(t_data *data) {
    if (data->move_up) move_up(data);
    if (data->move_down) move_down(data);
    if (data->move_left) move_left(data);
    if (data->move_right) move_right(data);
    return (0);
}

int main() {
    t_data data;
    data.mlx = mlx_init();
    data.win = mlx_new_window(data.mlx, 800, 600, "so_long");
    data.move_up = 0;
    data.move_down = 0;
    data.move_left = 0;
    data.move_right = 0;
    
    mlx_hook(data.win, 2, 1L<<0, key_press, &data);
    mlx_hook(data.win, 3, 1L<<1, key_release, &data);
    mlx_loop_hook(data.mlx, update_position, &data);
    mlx_loop(data.mlx);
    return (0);
}
------------------------------------------------------------------------------------
